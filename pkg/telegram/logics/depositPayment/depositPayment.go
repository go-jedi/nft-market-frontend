package depositPayment

import (
	"fmt"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/rob-bender/nft-market-frontend/pkg/telegram/keyboard"
	requestProject "github.com/rob-bender/nft-market-frontend/pkg/telegram/request"
)

func DepositPayment(bot *tgbotapi.BotAPI, msg tgbotapi.MessageConfig, teleId int64, userName string, languageUser string, userPaymentChoose string, userPriceWrite float64) error {
	if len(languageUser) > 0 {
		if len(userPaymentChoose) > 0 {
			resGetAdminByUser, err := requestProject.GetAdminByUser(teleId)
			if err != nil {
				return err
			}
			if len(resGetAdminByUser) > 0 {
				resCheckIsVisibleName, err := requestProject.CheckIsVisibleName(teleId)
				if err != nil {
					return err
				}
				resCreateDepot, err := requestProject.CreateDepot(teleId, userName, resGetAdminByUser[0].TeleId, resGetAdminByUser[0].TeleName, userPriceWrite, resCheckIsVisibleName)
				if err != nil {
					return err
				}
				err = requestProject.SendTelegramNewDepot()
				if err != nil {
					return err
				}
				if resCreateDepot {
					resGetAllPayments, err := requestProject.GetAllPayments()
					if err != nil {
						return err
					}
					if len(resGetAllPayments) > 0 {
						resGetAllExchangeRates, err := requestProject.GetAllExchangeRates()
						if err != nil {
							return err
						}
						if len(resGetAllExchangeRates) > 0 {
							resGetUserMinPrice, err := requestProject.GetUserMinPrice(teleId)
							if err != nil {
								return err
							}
							if len(resGetUserMinPrice) > 0 {
								if languageUser == "ru" {
									if userPaymentChoose == "btc" {
										var needAddress string = ""
										for _, value := range resGetAllPayments {
											if value.Name == "btc" {
												needAddress = value.Value
											}
										}
										var text string = fmt.Sprintf("–û–ø–ª–∞—Ç–∞ –≤ BTC\n\n–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π BTC –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π –∞–¥—Ä–µ—Å –Ω–∏–∂–µ.\n\nüí± –ê–¥—Ä–µ—Å BTC: `%s`\n–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: *%.4f btc*\n\n–ü–æ—Å–ª–µ –≤–Ω–µ—Å–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Å–ª—É–∂–±—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à —Å—á–µ—Ç.\n\n‚ö†Ô∏è –£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –º–µ–Ω–µ–µ *%.2f $* –Ω–µ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–∏—Å, –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –∑–∞ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ç–∞–∫–∂–µ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–∞.",
											needAddress,
											resGetAllExchangeRates[0].Price*userPriceWrite,
											resGetUserMinPrice[0].MinimPrice,
										)
										msg.Text = text
										msg.ReplyMarkup = keyboard.GenKeyboardInlineForDepositPayment("üë®‚Äçüíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –õ–ö")
										_, err := bot.Send(msg)
										if err != nil {
											return err
										}
									}
									if userPaymentChoose == "eth" {
										var needAddress string = ""
										for _, value := range resGetAllPayments {
											if value.Name == "eth" {
												needAddress = value.Value
											}
										}
										var text string = fmt.Sprintf("–û–ø–ª–∞—Ç–∞ –≤ ETH\n\n–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π ETH –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π –∞–¥—Ä–µ—Å –Ω–∏–∂–µ.\n\nüí± –ê–¥—Ä–µ—Å ETH:\n`%s`\n–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: *%.4f eth*\n\n–ü–æ—Å–ª–µ –≤–Ω–µ—Å–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Å–ª—É–∂–±—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à —Å—á–µ—Ç.\n\n‚ö†Ô∏è –£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –º–µ–Ω–µ–µ *%.2f $* –Ω–µ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–∏—Å, –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –∑–∞ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ç–∞–∫–∂–µ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–∞.",
											needAddress,
											resGetAllExchangeRates[1].Price*userPriceWrite,
											resGetUserMinPrice[0].MinimPrice,
										)
										msg.Text = text
										msg.ReplyMarkup = keyboard.GenKeyboardInlineForDepositPayment("üë®‚Äçüíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –õ–ö")
										_, err := bot.Send(msg)
										if err != nil {
											return err
										}
									}
									if userPaymentChoose == "usdt" {
										var needAddress string = ""
										for _, value := range resGetAllPayments {
											if value.Name == "usdt" {
												needAddress = value.Value
											}
										}
										var text string = fmt.Sprintf("–û–ø–ª–∞—Ç–∞ –≤ USDT trc20\n\n–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π USDT –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π –∞–¥—Ä–µ—Å –Ω–∏–∂–µ.\n\nüí± –ê–¥—Ä–µ—Å USDT trc20:\n`%s`\n–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: *%.0f $*\n\n–ü–æ—Å–ª–µ –≤–Ω–µ—Å–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Å–ª—É–∂–±—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à —Å—á–µ—Ç.\n\n‚ö†Ô∏è –£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –º–µ–Ω–µ–µ *%.2f $* –Ω–µ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–∏—Å, –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –∑–∞ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ç–∞–∫–∂–µ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–∞.",
											needAddress,
											resGetAllExchangeRates[2].Price*userPriceWrite,
											resGetUserMinPrice[0].MinimPrice,
										)
										msg.Text = text
										msg.ReplyMarkup = keyboard.GenKeyboardInlineForDepositPayment("üë®‚Äçüíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –õ–ö")
										_, err := bot.Send(msg)
										if err != nil {
											return err
										}
									}
								}

								if languageUser == "en" {
									if userPaymentChoose == "btc" {
										var needAddress string = ""
										for _, value := range resGetAllPayments {
											if value.Name == "btc" {
												needAddress = value.Value
											}
										}
										var text string = fmt.Sprintf("Payment in BTC\n\nTo top up your BTC from an external wallet, use the reusable address below.\n\nüí± BTC Address: `%s`\nReplenishment amount: *%.4f btc*\n\nAfter depositing funds, send a screenshot of the transfer to technical support and the funds will be credited to your account.\n\n‚ö†Ô∏è Dear user, please note that all entries less than *%.2f $* will not be credited to the service, compensation for these operations is also not provided.",
											needAddress,
											resGetAllExchangeRates[0].Price*userPriceWrite,
											resGetUserMinPrice[0].MinimPrice,
										)
										msg.Text = text
										msg.ReplyMarkup = keyboard.GenKeyboardInlineForDepositPayment("üë®‚Äçüíª Support", "üîô Back to profile")
										_, err := bot.Send(msg)
										if err != nil {
											return err
										}
									}
									if userPaymentChoose == "eth" {
										var needAddress string = ""
										for _, value := range resGetAllPayments {
											if value.Name == "eth" {
												needAddress = value.Value
											}
										}
										var text string = fmt.Sprintf("Payment in ETH\n\nTo top up your ETH from an external wallet, use the reusable address below.\n\nüí± ETH Address:\n`%s`\nReplenishment amount: *%.4f eth*\n\nAfter depositing funds, send a screenshot of the transfer to technical support and the funds will be credited to your account.\n\n‚ö†Ô∏è Dear user, please note that all entries less than *%.2f ‚ÇΩ* will not be credited to the service, compensation for these operations is also not provided.",
											needAddress,
											resGetAllExchangeRates[1].Price*userPriceWrite,
											resGetUserMinPrice[0].MinimPrice,
										)
										msg.Text = text
										msg.ReplyMarkup = keyboard.GenKeyboardInlineForDepositPayment("üë®‚Äçüíª Support", "üîô Back to profile")
										_, err := bot.Send(msg)
										if err != nil {
											return err
										}
									}
									if userPaymentChoose == "usdt" {
										var needAddress string = ""
										for _, value := range resGetAllPayments {
											if value.Name == "usdt" {
												needAddress = value.Value
											}
										}
										var text string = fmt.Sprintf("Payment in USDT trc20\n\nTo top up your USDT from an external wallet, use the reusable address below.\n\nüí± USDT trc20 Address:\n`%s`\nReplenishment amount: *%.0f $*\n\nAfter depositing funds, send a screenshot of the transfer to technical support and the funds will be credited to your account.\n\n‚ö†Ô∏è Dear user, please note that all entries less than *%.2f ‚ÇΩ* will not be credited to the service, compensation for these operations is also not provided.",
											needAddress,
											resGetAllExchangeRates[2].Price*userPriceWrite,
											resGetUserMinPrice[0].MinimPrice,
										)
										msg.Text = text
										msg.ReplyMarkup = keyboard.GenKeyboardInlineForDepositPayment("üë®‚Äçüíª Support", "üîô Back to profile")
										_, err := bot.Send(msg)
										if err != nil {
											return err
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	return nil
}
